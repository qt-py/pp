"import numpy as np
import pandas as pd
from io import StringIO


csv_data = '''A, B, C, D
1.0, 2.0, 3.0, 4.0
5.0, 6.0,, 8.0
10.0, 11.0, 12.0,
,,,'''


df = pd.read_csv(StringIO(csv_data))


df.isnull().sum()


print(df.values)

print(df.dropna())


print(df.dropna(axis=1))


print(df.dropna(how='all'))

print(df.dropna(thresh=4))

df.dropna(subset=['A'])



df = pd.DataFrame([
            ['green', 'M', 10.1, 'class1'],
            ['red', 'L', 13.5, 'class2'],
            ['blue', 'XL', 15.3, 'class1']])
df.columns = ['color', 'size', 'price', 'classlabel']   
print(df)         


size_mapping = {
                'XL': 3,
                'L': 2,
                'M': 1}
df['size'] = df['size'].map(size_mapping)
print(df)


inv_size_mapping = {v: k for k, v in size_mapping.items()}
df['size'] = df['size'].map(inv_size_mapping)
print(df)


class_mapping = {label:idx for idx, label in 
                 enumerate(np.unique(df['classlabel']))}
print(class_mapping)                 

df['classlabel'] = df['classlabel'].map(class_mapping)
df['size'] = df['size'].map(size_mapping)
print(df)

inv_class_mapping = {v:k for k, v in class_mapping.items()}
df['classlabel'] = df['classlabel'].map(inv_class_mapping)
print(df)


from sklearn.preprocessing import LabelEncoder
class_le = LabelEncoder()
y = class_le.fit_transform(df['classlabel'].values)
print(y)


print(class_le.inverse_transform(y))


X = df[['color', 'size', 'price']].values
color_le = LabelEncoder()
X[:, 0] = color_le.fit_transform(X[:, 0])
print(X)
 

 


df_wine = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-\
databases/wine/wine.data', header=None)


df_wine.columns = ['Class label', 'Alcohol',
                   'Malic acid', 'Ash',
                   'Alkanalinity of ash', 'Magnesium',
                   'Total phenols', 'Flavonoids',
                   'Nonflavonoid phenols',
                   'Proanthocyanins',
                   'Color intensity', 'Hue',
                   'OD280/OD315 of diluted wines',
                   'Proline']
                   
                 
print('Class labels', np.unique(df_wine['Class label']))
print(df_wine.head())


print(df_wine.isnull().sum())


from sklearn.model_selection import train_test_split
X, y = df_wine.iloc[:, 1:].values, df_wine.iloc[:, 0].values

X_train, X_test, y_train, y_test = \
        train_test_split(X, y, test_size=0.3, random_state=0)
               
      
from sklearn.preprocessing import MinMaxScaler
mms = MinMaxScaler()
X_train_norm = mms.fit_transform(X_train)
X_test_norm = mms.transform(X_test)     


from sklearn.preprocessing import StandardScaler
stdsc = StandardScaler() 
X_train_std = stdsc.fit_transform(X_train)
X_test_std = stdsc.transform(X_test)"
